@page "/AddCategory"

@using PetMingle.Data;
@using PetMingle.Data.Repositories.Admin;
@using PetMingle.Entities;
@using Microsoft.EntityFrameworkCore;

@inject IDbContextFactory<DataContext> ContextFactory;

<div class="add-category-wrapper">
    <AuthorizeView Roles="Admin">
        <Authorized Context="authContext">
            <div class="add-category">
                <h4 class="add-category-title">Add a new Category</h4>

                <EditForm Model="_createdCategory" OnValidSubmit="SaveCategoryAsync" style="width: 35vw;">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    @*Category Name*@
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-input form-control mb-3 site-acc-input" @bind-Value="_createdCategory.Name" />
                    <ValidationMessage For="@(() => _createdCategory.Name)" />


                    @*Description*@
                    <label for="description" class="form-label">Description</label>
                    <InputText id="description" class="form-input form-control mb-3 site-acc-input" @bind-Value="_createdCategory.Description" />
                    <ValidationMessage For="@(() => _createdCategory.Description)" />

                    <div class="w-100 text-center p-5">
                        <button class="btn btn-success btn-lg" id="btn-submit" type="submit">Add</button>
                    </div>

                    <div class=" w-100 text-center p-5">
                        <div class="alert-success"> @validationMessage</div>
                    </div>
                </EditForm>

            </div>
        </Authorized>
        <NotAuthorized>
            <div>Not Authorized.</div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    Category _createdCategory = new();

    string validationMessage = "";
    async Task ResetValidationMessage()
    {
        await Task.Delay(3000);
        validationMessage = "";
        await InvokeAsync(StateHasChanged);
    }

    async Task SaveCategoryAsync()
    {
        using (var repo = new CategoryRepository(ContextFactory.CreateDbContext()))
        {
            await repo.CreateCategoryAsync(_createdCategory);
        }

        _createdCategory = new Category();

        validationMessage = "Category added succesfully";
        await InvokeAsync(StateHasChanged);

        await ResetValidationMessage();
    }
}